<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>  
<#@ Assembly Name="System.Xml.Linq.dll" #>  
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#+
void GenerateSet(string folderName, string pathToTests = @"..\..\Contrib", string ignoreListPath = @"..\..\Contrib\NLTestToolkit\NLTest.IgnoreList.xml") {
	var searchPattern = "*.test";
	var absFolderName = this.Host.ResolvePath(System.IO.Path.Combine(pathToTests, folderName));
	var testFiles = System.IO.Directory.GetFiles(absFolderName, searchPattern);
	var ignoreListXDoc = XDocument.Load(this.Host.ResolvePath(ignoreListPath));
	var ignoreList = ignoreListXDoc.Descendants(XName.Get("ignore")).ToDictionary(x => @"test\" + x.Attribute("test").Value, x => x.Attribute("reason").Value);
#>
// **********************************************************************************
// Copyright (c) 2015-2020, Dmitry Merzlyakov.  All rights reserved.
// Licensed under the FreeBSD Public License. See LICENSE file included with the distribution for details and disclaimer.
// 
// This file is part of NLedger that is a .Net port of C++ Ledger tool (ledger-cli.org). Original code is licensed under:
// Copyright (c) 2003-2020, John Wiegley.  All rights reserved.
// See LICENSE.LEDGER file included with the distribution for details and disclaimer.
// **********************************************************************************
using Xunit;
namespace NLedger.IntegrationTests
{
    // [DeploymentItem(@"<#= folderName #>", @"<#= folderName #>")]
    public class TestSet1_<#= folderName.Replace(@"\", "_") #>
    {
		<#+ foreach (var file in testFiles) { 
		var shortFileName = System.IO.Path.GetFileName(file);
		var methodName = System.IO.Path.GetFileNameWithoutExtension(shortFileName).Replace("-", "_"); #>
<#+ if(!ignoreList.ContainsKey(folderName + @"\" + shortFileName)) { #>        [Fact]<#+ } else { #>        [Fact(Skip="<#= ignoreList[folderName + @"\" + shortFileName] #>")]<#+ } #>
        [Trait("Category", "Integration")]
        public void IntegrationTest_<#= folderName.Replace(@"\", "_") #>_<#= methodName #>()
        {
            new TestRunner(@"<#= folderName.Replace(@"\", "/") + @"/" + shortFileName #>").Run();
        }
		<#+ } #>

    }
}
<#+ } #>